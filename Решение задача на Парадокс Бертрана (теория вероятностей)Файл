import numpy as np

r = 1
rng = np.random.default_rng()


def rejection_sampling():
    global r
    global rng
    while True:
        x = r * (rng.random() * 2 - 1)
        y = r * (rng.random() * 2 - 1)
        if x * x + y * y < r * r:
            return x, y


def l1(x, y):
    global r
    return 2 * (r * r - x * x - y * y)**0.5

def rho_phi():
    global r
    global rng
    rho = r * rng.random()
    phi = rng.random() * 2 * np.pi
    return rho * np.cos(phi), rho * np.sin(phi)


def l2():
    global r
    global rng
    phi1 = rng.random() * 2 * np.pi

    x1 = r * np.cos(phi1)
    y1 = r * np.sin(phi1)

    phi2 = rng.random() * 2 * np.pi

    x2 = r * np.cos(phi2)
    y2 = r * np.sin(phi2)

    return ((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1)) ** 0.5


N = 10000

#print(rejection_sampling())
#print(l1(*rejection_sampling()))


chord_l1 = np.array([l1(*rejection_sampling()) for i in range(N)])
chord_l1_1 = np.array([l1(*rho_phi()) for i in range(N)])
chord_l2 = np.array([l2() for i in range(N)])
print('chord_l1 =', chord_l1)
print('average l1 =', np.average(chord_l1))
print('chord_l1_1 =', chord_l1_1)
print('average l1_1 =', np.average(chord_l1_1))
print('chord_l2 =', chord_l2)
print('average l2 =', np.average(chord_l2))
